1.在default_sched.c中：
When one proc structure is selected, remember to update the stride
 * property of the proc. (stride += BIG_STRIDE / priority) 这里定义的lab6_poolstride 
 if (p->lab6_priority == 0)
          p->lab6_stride += BIG_STRIDE;
     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
  可以看出这里使用了取模的运算，lab6_stride 的值如果大于BIG_STRIDE后，让p->lab6_stride-q->lab6_stride>0取lab6_stride较小的值
2.操作系统采用整形运算，溢出时如何解决———STRIDE和PASS是无符号整数，但是在做比较的时候是用的有符号值来比较
STRIDE和PASS是无符号整数，相减后转化成有符号数，由于无符号整数溢出后会直接由max变为0,导致结果错误；但在有符号中相当于从-1变成0, 结果依然正确；由于另一个约束条件：STRIDE\_MAX - STRIDE\_MIN<PASS\_MAX的最大值限制，溢出范围有限，故有符号的比较一定正确；
考虑另一种情况，当较大值处于2^31 ~ 2^32-1，较小值处于0~2^31-1时，二者有符号状态下相减后结果溢出，取32位整数后依然正确。
对于STRIDE_MAX – STRIDE_MIN <= BIG_STRIDE,于是我们只要将BigStride取在某个范围之内，即可保证对于任意两个 Stride 之差都会在机器整数表示的范围之内。而我们可以通过其与0的比较结构，来得到两个Stride的大小关系。在上例中，虽然在直接的数值表示上 98 < 65535，但是 98 - 65535 的结果用带符号的 16位整数表示的结果为99,与理论值之差相等。所以在这个意义下 98 > 65535。基于这种特殊考虑的比较方法，即便Stride有可能溢出，我们仍能够得到理论上的当前最小Stride，并做出正确的调度决定
